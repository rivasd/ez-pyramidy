{"version":3,"sources":["quiz.js","pyramidy/categorie.js","pyramidy/pyramid.js","App.js","serviceWorker.js","index.js"],"names":["runWords","category","max_time","arguments","length","undefined","overlay","document","createElement","classList","add","innerHTML","fullName","id","timerInterval","timer","getElementById","appendChild","remainingTime","startGame","removeEventListener","jsPsych","init","display_element","timeline","buildPyramidTimeline","on_finish","data","clearInterval","textContent","score","select","values","reduce","acc","cur","parseInt","toString","setTimeout","remove","intro","type","stimulus","concat","choices","setInterval","endExperiment","answers","_toConsumableArray","words","counter","correct_text","incorrect_text","feedback_duration","response_ends_trial","key_answer","pluginAPI","convertKeyCharacterToKeyCode","resp","response","button_pressed","splice","on_load","a","keyboardListener","getKeyboardResponse","callback_function","info","compareKeys","key","cancelKeyboardResponse","click","valid_responses","rt_method","persist","allow_held_key","loop_function","addEventListener","Categorie","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","jsPsychTarget","React","createRef","play","bind","_assertThisInitialized","state","disabled","_createClass","value","e","preventDefault","stopPropagation","this","setState","default_time","catClass","classNames","playing","order","className","ref","style","onClick","displayName","Component","defaultProps","Pyramid","mainFrame","categories","num","formula","algebra","parse","Math","ceil","solveFor","valueOf","pyramidHeigth","findHeigth","dims","rows","cols","gridTemplateColumns","repeat","gridTemplateRows","heigth","cutoffs","i","push","findCutoffs","styles","forEach","threshold","row","startingCol","gridColumnStart","gridColumnEnd","gridRowStart","_this2","calculateElemsGridCss","getGridCss","map","elem","idx","App","input","loadData","file","current","files","reader","FileReader","self","onload","text","result","parsed","jsyaml","safeLoad","alert","readAsText","display","htmlFor","name","accept","onChange","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAyIeA,MAvIf,SAAkBC,GAAuB,IAAbC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAC,GAC7BG,EAAUC,SAASC,cAAc,OACrCF,EAAQG,UAAUC,IAAI,WACtBJ,EAAQK,UAAY,oBAAsBV,EAASW,SAAS,OAC5DN,EAAQO,GAAK,kBAEb,IAMIC,EANAC,EAAQR,SAASC,cAAc,QACnCO,EAAMN,UAAUC,IAAI,kBAEpBH,SAASS,eAAe,iBAAiBC,YAAYX,GACrDC,SAASS,eAAe,iBAAiBC,YAAYF,GAGrD,IAAIG,EAAgBhB,EAMpB,SAASiB,IACLb,EAAQc,oBAAoB,QAASD,GACrCE,QAAQC,KAAK,CACTC,gBAAiB,kBACjBC,SAAWC,EAAqBxB,GAChCyB,UAAW,SAACC,GACRC,cAAcd,GACdC,EAAMc,YAAc,GACpB,IAAIC,EAAQH,EAAKI,OAAO,kBAAkBC,OAAOC,QAAQ,SAACC,EAAKC,GAC3D,OAAOD,GAAO,EAAEE,SAASD,MAC1B,GACH7B,EAAQK,UAAY,aAAcmB,EAAMO,WAAa,OACrDC,YAAW,WACPhC,EAAQiC,SACRxB,EAAMwB,WACP,QAOf,SAASd,EAAqBxB,GAC1B,IAAIuC,EACA,CACIC,KAAM,uBACNC,SAAS,iBAADC,OAAmBzC,EAAQ,6NAEnC0C,QAAS,CAAC,eACVlB,UAAW,SAASC,GAChBZ,EAAMc,YAAcX,EAAcmB,WAClCvB,EAAgB+B,aAAa,WACzB3B,IACAH,EAAMc,YAAcX,EAAcmB,WAC/BnB,EAAgB,GACfG,QAAQyB,kBAEb,OAKXC,EAAOC,YAAO/C,EAASgD,OAEvBC,GADYH,EAAQ3C,OACV,GA6Dd,MAAO,CAACoC,EAAO,CACXhB,SAAU,CA5DE,CACZiB,KAAM,uBACNC,SAAU,WACN,MAAO,MAAQK,EAAQG,EAAUH,EAAQ3C,QAAU,QAEvDwC,QAAS,CAAC,YAAU,SACpBO,aAAa,SACbC,eAAgB,eAChBC,kBAAmB,IACnBC,qBAAqB,EACrBC,WAAYlC,QAAQmC,UAAUC,6BAA6B,KAC3D/B,UAAW,SAACC,GACR,IAAI+B,EAAO/B,EAAKgC,UAAYhC,EAAKiC,eACrB,GAARF,EACAX,EAAQc,OAAOX,EAAUH,EAAQ3C,OAAQ,GAE7B,GAARsD,GACJR,KAIRY,QAAS,SAACC,GAGN,IAuBIC,EAAmB3C,QAAQmC,UAAUS,oBAAoB,CACzDC,kBAxBY,SAACC,GAGT9C,QAAQmC,UAAUY,YAAYD,EAAKE,IAAK,MAIR,qBAArBL,GACP3C,QAAQmC,UAAUc,uBAAuBN,GAE3CzD,SAASS,eAAe,yCAAyCuD,SAE9DlD,QAAQmC,UAAUY,YAAYD,EAAKE,IAAK,OAGb,qBAArBL,GACP3C,QAAQmC,UAAUc,uBAAuBN,GAE7CzD,SAASS,eAAe,yCAAyCuD,UAOrEC,gBAAiB,CAAC,IAAK,KACvBC,UAAW,cACXC,SAAS,EACTC,gBAAgB,OASxBC,cAAe,WACX,OAAO7B,EAAQ3C,OAAS,KAjHhC,aAAcH,IACdiB,EAAgBjB,EAASC,UAwB7BI,EAAQuE,iBAAiB,QAAS1D,IClChC2D,EAAS,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAEX,SAAAA,EAAYK,GAAO,IAADC,EAMb,OANaC,YAAA,KAAAP,IACdM,EAAAH,EAAAK,KAAA,KAAMH,IACDI,cAAgBC,IAAMC,YAC3BL,EAAKM,KAAON,EAAKM,KAAKC,KAAIC,YAAAR,IAC1BA,EAAKS,MAAQ,CACTC,UAAU,GACbV,EA6BJ,OA5BAW,YAAAjB,EAAA,EAAAT,IAAA,OAAA2B,MAGD,SAAKC,GACDA,EAAEC,iBACFD,EAAEE,kBACFC,KAAKC,SAAS,CACVP,UAAS,IAGb9F,EAASoG,KAAKjB,MAAMlF,SAAUmG,KAAKjB,MAAMmB,gBAC5C,CAAAjC,IAAA,SAAA2B,MAED,WAEI,IAAIO,EAAWC,IAAW,qBAAqB,CAC3C,8BAA+BJ,KAAKP,MAAMC,SAC1C,6BAA8BM,KAAKjB,MAAMsB,UAK7C,OAEIjB,IAAAhF,cAAA,OAAKK,GAAI,sBAAsBuF,KAAKjB,MAAMuB,MAAOC,UAAWJ,EAAUK,IAAKR,KAAKb,cAAesB,MAAOT,KAAKjB,MAAM0B,MAAOC,QAASV,KAAKV,MAClIF,IAAAhF,cAAA,YAAO4F,KAAKjB,MAAM4B,kBAG7BjC,EArCU,CAASkC,aAwCxBlC,EAAUmC,aAAe,CACrBnB,UAAU,EACVW,SAAS,EACTM,YAAa,OACbnG,SAAU,QAGCkE,Q,iBCkCAoC,EApFF,SAAAnC,GAAAC,YAAAkC,EAAAnC,GAAA,IAAAE,EAAAC,YAAAgC,GAET,SAAAA,EAAY/B,GAAO,IAADC,EAOb,OAPaC,YAAA,KAAA6B,IACd9B,EAAAH,EAAAK,KAAA,KAAMH,IACDgC,UAAY3B,IAAMC,YAEvBL,EAAKS,MAAQ,CACTuB,WAAajC,EAAMiC,WACnBd,aAAcnB,EAAMmB,cACvBlB,EAwEJ,OAvEAW,YAAAmB,EAAA,EAAA7C,IAAA,aAAA2B,MAED,SAAWqB,GACP,IAAIC,EAAUC,IAAQC,MAAM,yBAAyBH,EAAM,QAC3D,OAAOI,KAAKC,KAAKJ,EAAQK,SAAS,KAAK,GAAGC,aAE7C,CAAAvD,IAAA,aAAA2B,MAED,WACI,IAAI6B,EAAgBzB,KAAK0B,WAAW1B,KAAKP,MAAMuB,WAAWhH,QACtD2H,EAAO,CACPC,KAAMH,EACNI,KAAsB,EAAhBJ,GAMV,MAJa,CACTK,sBAAwB,IAAMH,EAAW,MAAG1F,WAAW,MAAM8F,OAAOJ,EAAW,MAC/EK,mBAAoB,IAAML,EAAW,MAAG1F,WAAW,MAAM8F,OAAOJ,EAAW,SAGlF,CAAA1D,IAAA,cAAA2B,MAED,SAAYqC,GAER,IADA,IAAIC,EAAU,GACNC,EAAE,EAAGA,EAAEF,EAAQE,IACG,IAAnBD,EAAQlI,OACPkI,EAAQE,KAAK,GAGbF,EAAQE,KAAKF,EAAQA,EAAQlI,OAAO,GAAGmI,GAG/C,OAAOD,IACV,CAAAjE,IAAA,wBAAA2B,MAED,SAAsBoB,GAClB,IAAIS,EAAgBzB,KAAK0B,WAAW1B,KAAKP,MAAMuB,WAAWhH,QACtDkI,EAAUlC,KAAKqC,YAAYZ,GAC3Ba,EAAS,GAiBb,OAfAJ,EAAQK,SAAQ,SAACC,EAAWC,GAGxB,IAFA,IAAIC,EAAcjB,EAAgBgB,EAE1BN,EAAE,EAAGA,EAAEM,EAAI,KACXD,EAAUL,EAAKnB,EAAWhH,QADZmI,IAIlBG,EAAOF,KAAK,CACRO,gBAAiBD,EAAgB,EAAFP,EAC/BS,cAAe,SACfC,aAAaJ,EAAI,OAKtBH,IACV,CAAArE,IAAA,SAAA2B,MAID,WAAU,IAADkD,EAAA,KAEDR,EAAStC,KAAK+C,sBAAsB/C,KAAKjB,MAAMiC,YAEnD,OACI5B,IAAAhF,cAAA,OAAKmG,UAAU,gBAAgBE,MAAOT,KAAKgD,cACtChD,KAAKP,MAAMuB,WAAWiC,KAAK,SAACC,EAAMC,GAAG,OAClC/D,IAAAhF,cAACsE,EAAS,CAAC+B,MAAO6B,EAAOa,GAAMlF,IAAKkF,EAAK7C,MAAO6C,EAAKxC,YAAauC,EAAKvC,YAAanG,SAAU0I,EAAK1I,SAAUX,SAAUqJ,EAAMhD,aAAc4C,EAAK/D,MAAMmB,uBAKrKY,EAjFQ,CAASF,a,iBC+DPwC,EA7DN,SAAAzE,GAAAC,YAAAwE,EAAAzE,GAAA,IAAAE,EAAAC,YAAAsE,GAEP,SAAAA,EAAYrE,GAAO,IAADC,EAMf,OANeC,YAAA,KAAAmE,IAChBpE,EAAAH,EAAAK,KAAA,KAAMH,IACDsE,MAAQjE,IAAMC,YACnBL,EAAKsE,SAAWtE,EAAKsE,SAAS/D,KAAIC,YAAAR,IAClCA,EAAKS,MAAQ,CACXuB,WAAY,MACbhC,EAkDF,OAjDAW,YAAAyD,EAAA,EAAAnF,IAAA,WAAA2B,MAED,SAASC,GACPA,EAAEC,iBACF,IAAIyD,EAAOvD,KAAKqD,MAAMG,QAAQC,MAAM,GAChCC,EAAS,IAAIC,WACbC,EAAO5D,KAEX0D,EAAOG,OAAS,WACd,IAAIC,EAAOJ,EAAOK,OAClB,IACE,IAAIC,EAASC,IAAOC,SAASJ,GACzBhK,EAAW,GACX,aAAckK,IAChBlK,EAAWkC,SAASgI,EAAOlK,WAG7B8J,EAAK3D,SAAS,CACZe,WAAYgD,EAAOhD,WACnBd,aAAcpG,IAGlB,MAAO+F,GACLsE,MAAM,4DAIVT,EAAOU,WAAWb,KAEnB,CAAAtF,IAAA,SAAA2B,MAED,WAAU,IAADkD,EAAA,KACP,OACE1D,IAAAhF,cAAA,OAAKmG,UAAU,MAAM9F,GAAG,iBACtB2E,IAAAhF,cAAA,OAAKK,GAAG,oBAAoBgG,MAAO,CAAC4D,QAAmC,OAA1BrE,KAAKP,MAAMuB,WAAsB,QAAU,SACtF5B,IAAAhF,cAAA,SAAOkK,QAAQ,UAAS,6BAA8BlF,IAAAhF,cAAA,WACtDgF,IAAAhF,cAAA,SAAOiC,KAAK,OAAO5B,GAAG,SAAS8J,KAAK,SAASC,OAAO,kBAAkBhE,IAAKR,KAAKqD,MAAOoB,SAAUzE,KAAKsD,YAGvE,OAA1BR,EAAKrD,MAAMuB,WACL,GAGC5B,IAAAhF,cAAC0G,EAAO,CAACE,WAAY8B,EAAKrD,MAAMuB,WAAYd,aAAc4C,EAAKrD,MAAMS,oBAMxFkD,EA1DM,CAASxC,aCME8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACJ5F,IAAAhF,cAAA,YACGgF,IAAAhF,cAAA,cACIgF,IAAAhF,cAAA,UAAI,eACJgF,IAAAhF,cAAA,UAAI,uDAERgF,IAAAhF,cAAA,eACIgF,IAAAhF,cAACgJ,EAAG,QAGTjJ,SAASS,eAAe,SDiHzB,kBAAmBqK,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d40ad347.chunk.js","sourcesContent":["/* global jsPsych */\r\n\r\nfunction runWords(category, max_time=60){\r\n    var overlay = document.createElement(\"div\");\r\n    overlay.classList.add(\"overlay\");\r\n    overlay.innerHTML = \"<p class=\\\"title\\\">\"+category.fullName+\"</p>\"\r\n    overlay.id = \"pyramidy-target\"\r\n\r\n    var timer = document.createElement(\"span\");\r\n    timer.classList.add(\"pyramidy-timer\");\r\n    \r\n    document.getElementById(\"app-container\").appendChild(overlay);\r\n    document.getElementById(\"app-container\").appendChild(timer);\r\n\r\n    var timerInterval\r\n    var remainingTime = max_time;\r\n    if( \"max_time\" in category){\r\n        remainingTime = category.max_time;\r\n    }\r\n    \r\n\r\n    function startGame(){\r\n        overlay.removeEventListener(\"click\", startGame);\r\n        jsPsych.init({\r\n            display_element: \"pyramidy-target\",\r\n            timeline : buildPyramidTimeline(category),\r\n            on_finish: (data) => {\r\n                clearInterval(timerInterval);\r\n                timer.textContent = \"\";\r\n                var score = data.select(\"button_pressed\").values.reduce( (acc, cur) =>{\r\n                    return acc + (1-parseInt(cur));\r\n                }, 0);\r\n                overlay.innerHTML = \"<p>score: \"+ score.toString() + \"</p>\";\r\n                setTimeout(()=>{\r\n                    overlay.remove();\r\n                    timer.remove();\r\n                }, 2000)\r\n            }\r\n        }) \r\n    }\r\n\r\n    overlay.addEventListener(\"click\", startGame)\r\n\r\n    function buildPyramidTimeline(category) {\r\n        var intro = \r\n            {\r\n                type: \"html-button-response\",\r\n                stimulus: `<p>Vous aurez ${max_time} secondes pour faire deviner un maximum de mots! \\n Si vous devez deviner, détournez le regard maintenant. </p> \\\r\n                        <p> Utilisez les boutons, ou sinon ESPACE pour réussir et P pour passer</p>`,\r\n                choices: [\"Débuter!\"],\r\n                on_finish: function(data) {\r\n                    timer.textContent = remainingTime.toString();\r\n                    timerInterval = setInterval( () => {\r\n                        remainingTime--;\r\n                        timer.textContent = remainingTime.toString();\r\n                        if(remainingTime < 1){\r\n                            jsPsych.endExperiment();\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n        \r\n\r\n        var answers = [...category.words];\r\n        var total_num = answers.length;\r\n        var counter = 0;\r\n\r\n        var questions = {\r\n            type: \"html-button-response\",\r\n            stimulus: () => {\r\n                return \"<p>\" + answers[counter % answers.length] + \"</p>\"\r\n            },\r\n            choices: [\"réussi\", \"passe\"],\r\n            correct_text:\"Bravo!\",\r\n            incorrect_text: \"ipelaille...\",\r\n            feedback_duration: 250,\r\n            response_ends_trial: true,\r\n            key_answer: jsPsych.pluginAPI.convertKeyCharacterToKeyCode(\"s\"),\r\n            on_finish: (data) => {\r\n                var resp = data.response || data.button_pressed\r\n                if (resp == 0){\r\n                    answers.splice(counter % answers.length, 1);\r\n                }\r\n                else if(resp == 1) {\r\n                    counter++;\r\n                }\r\n                \r\n            },\r\n            on_load: (a) => {\r\n                //attach custom key event listeners to keep current keyboard response\r\n                \r\n                var after_key = (info) => {\r\n\r\n                    \r\n                    if (jsPsych.pluginAPI.compareKeys(info.key, \" \")){\r\n                        //trigger réussi\r\n                        \r\n\r\n                        if (typeof keyboardListener !== 'undefined') {\r\n                            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n                          }\r\n                          document.getElementById(\"jspsych-html-button-response-button-0\").click();\r\n                    }\r\n                    else if (jsPsych.pluginAPI.compareKeys(info.key, \"p\")){\r\n                        //trigger passe\r\n                        \r\n                        if (typeof keyboardListener !== 'undefined') {\r\n                            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n                          }\r\n                        document.getElementById(\"jspsych-html-button-response-button-1\").click();\r\n                    }\r\n\r\n                }\r\n\r\n                var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n                    callback_function: after_key,\r\n                    valid_responses: [\" \", \"p\"],\r\n                    rt_method: 'performance',\r\n                    persist: false,\r\n                    allow_held_key: false\r\n                  });\r\n            }\r\n        }\r\n    \r\n    \r\n    \r\n        return [intro, {\r\n            timeline: [questions],\r\n            loop_function: () => {\r\n                return answers.length > 0\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default runWords;","import React, { Component } from 'react';\r\nimport PropType from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport runWords from '../quiz';\r\n\r\n\r\n\r\nclass Categorie extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.jsPsychTarget = React.createRef();\r\n        this.play = this.play.bind(this);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n\r\n    play(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.setState({\r\n            disabled:true\r\n        })\r\n\r\n        runWords(this.props.category, this.props.default_time)\r\n    }\r\n\r\n    render(){\r\n\r\n        var catClass = classNames(\"pyramidy-categorie\",{\r\n            'pyramidy-categorie-disabled': this.state.disabled,\r\n            'pyramidy-categorie-playing': this.props.playing\r\n        })\r\n\r\n\r\n\r\n        return(\r\n            \r\n            <div id={\"pyramidy-categorie-\"+this.props.order} className={catClass} ref={this.jsPsychTarget} style={this.props.style} onClick={this.play}>\r\n                <span>{this.props.displayName}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nCategorie.defaultProps = {\r\n    disabled: false,\r\n    playing: false,\r\n    displayName: \"None\",\r\n    fullName: \"None\"\r\n}\r\n\r\nexport default Categorie","import React, { Component } from 'react';\r\nimport Categorie from './categorie';\r\nimport algebra from 'algebra.js';\r\n\r\nclass Pyramid extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.mainFrame = React.createRef();\r\n\r\n        this.state = {\r\n            categories : props.categories,\r\n            default_time: props.default_time\r\n        }\r\n    }\r\n\r\n    findHeigth(num){\r\n        var formula = algebra.parse(\"1/2 * x^2 + 1/2 * x - \"+num + \" = 0\"); //By Gauss's equation n(n+1)/2\r\n        return Math.ceil(formula.solveFor(\"x\")[1].valueOf()); // take the ceiling integer part of the positive root\r\n       \r\n    }\r\n\r\n    getGridCss(){\r\n        var pyramidHeigth = this.findHeigth(this.state.categories.length);\r\n        var dims = {\r\n            rows: pyramidHeigth,\r\n            cols: pyramidHeigth * 2\r\n        }\r\n        var style =  {\r\n            gridTemplateColumns : ((100 / dims[\"cols\"]).toString()+\"% \").repeat(dims[\"cols\"]),\r\n            gridTemplateRows: ((100 / dims[\"rows\"]).toString()+\"% \").repeat(dims[\"rows\"]),\r\n        }\r\n        return style;\r\n    }\r\n\r\n    findCutoffs(heigth) {\r\n        var cutoffs = []\r\n        for(let i=0; i<heigth; i++){\r\n            if(cutoffs.length === 0){\r\n                cutoffs.push(1);\r\n            }\r\n            else{\r\n                cutoffs.push(cutoffs[cutoffs.length-1]+i);\r\n            }\r\n        }\r\n        return cutoffs\r\n    }\r\n\r\n    calculateElemsGridCss(categories) {\r\n        var pyramidHeigth = this.findHeigth(this.state.categories.length)\r\n        var cutoffs = this.findCutoffs(pyramidHeigth);\r\n        var styles = []\r\n\r\n        cutoffs.forEach((threshold, row) => {\r\n            var startingCol = pyramidHeigth - row;\r\n\r\n            for(let i=0; i<row+1; i++){\r\n                if((threshold+i) > categories.length){\r\n                    break;\r\n                }\r\n                styles.push({\r\n                    gridColumnStart: startingCol+ (i*2),\r\n                    gridColumnEnd: \"span 2\",\r\n                    gridRowStart:row+1\r\n                })\r\n            }\r\n        })\r\n\r\n        return styles;\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        var styles = this.calculateElemsGridCss(this.props.categories)\r\n\r\n        return (\r\n            <div className=\"pyramidy-main\" style={this.getGridCss()}>\r\n                {this.state.categories.map( (elem, idx) => (\r\n                    <Categorie style={styles[idx]} key={idx} order={idx} displayName={elem.displayName} fullName={elem.fullName} category={elem} default_time={this.props.default_time}/>\r\n                ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pyramid","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Pyramid from './pyramidy/pyramid';\r\nimport jsyaml from 'js-yaml';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.input = React.createRef()\r\n    this.loadData = this.loadData.bind(this);\r\n    this.state = {\r\n      categories: null\r\n    }\r\n  }\r\n\r\n  loadData(e){\r\n    e.preventDefault();\r\n    var file = this.input.current.files[0];\r\n    var reader = new FileReader();\r\n    var self = this;\r\n    \r\n    reader.onload = function(){\r\n      var text = reader.result\r\n      try {\r\n        var parsed = jsyaml.safeLoad(text);\r\n        var max_time = 60;\r\n        if (\"max_time\" in parsed){\r\n          max_time = parseInt(parsed.max_time)\r\n        };\r\n\r\n        self.setState({\r\n          categories: parsed.categories,\r\n          default_time: max_time\r\n        })\r\n      }\r\n      catch (e){\r\n        alert(\"Oups! there was a problem with your file, check syntax\")\r\n      }\r\n    }\r\n\r\n    reader.readAsText(file)\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" id=\"app-container\">\r\n        <div id=\"pyramidy-selector\" style={{display: this.state.categories === null ? \"block\" : \"none\"}}>\r\n          <label htmlFor=\"source\">Sélectionnez votre jeu</label><br/>\r\n          <input type=\"file\" id=\"source\" name=\"source\" accept=\".txt,.yaml,.yml\" ref={this.input} onChange={this.loadData}/>\r\n        </div>\r\n          { (() => {\r\n            if(this.state.categories === null){\r\n              return \"\"\r\n            }\r\n            else{\r\n              return (<Pyramid categories={this.state.categories} default_time={this.state.default_time}/>)\r\n            }\r\n          })()}\r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    (<main>\r\n        <header>\r\n            <h3>EZ-Pyramidy</h3>\r\n            <h4>Le système de jeu Pyramide FACILE à utiliser</h4>\r\n        </header>\r\n        <section>\r\n            <App />\r\n        </section>\r\n    </main>\r\n    ), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}