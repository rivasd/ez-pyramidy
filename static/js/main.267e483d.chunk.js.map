{"version":3,"sources":["quiz.js","pyramidy/categorie.js","pyramidy/pyramid.js","App.js","serviceWorker.js","index.js"],"names":["runWords","category","ref","overlay","document","createElement","classList","add","innerHTML","fullName","id","timerInterval","timer","getElementById","appendChild","remainingTime","buildPyramidTimeline","timeline","type","stimulus","on_finish","data","textContent","toString","setInterval","jsPsych","endExperiment","clearInterval","words","forEach","word","idx","push","choices","addEventListener","startGame","removeEventListener","init","display_element","displayData","remove","Categorie","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","jsPsychTarget","React","createRef","play","bind","assertThisInitialized","state","disabled","e","preventDefault","stopPropagation","setState","current","catClass","classNames","pyramidy-categorie-disabled","pyramidy-categorie-playing","playing","react_default","a","order","className","style","onClick","displayName","Component","defaultProps","Pyramid","mainFrame","categories","num","formula","algebra","parse","Math","ceil","solveFor","valueOf","pyramidHeigth","findHeigth","length","dims","rows","cols","gridTemplateColumns","repeat","gridTemplateRows","heigth","cutoffs","i","findCutoffs","styles","threshold","row","startingCol","gridColumnStart","gridColumnEnd","gridRowStart","calculateElemsGridCss","getGridCss","map","elem","categorie","key","App","input","loadData","file","files","reader","FileReader","self","onload","text","result","parsed","jsyaml","safeLoad","alert","readAsText","_this2","display","htmlFor","name","accept","onChange","pyramid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.267e483d.chunk.js","sourcesContent":["/* global jsPsych */\r\n\r\n\r\nfunction runWords(category, ref){\r\n    var overlay = document.createElement(\"div\");\r\n    overlay.classList.add(\"overlay\");\r\n    overlay.innerHTML = \"<p class=\\\"title\\\">\"+category.fullName+\"</p>\"\r\n    overlay.id = \"pyramidy-target\"\r\n\r\n    var timer = document.createElement(\"span\");\r\n    timer.classList.add(\"pyramidy-timer\");\r\n    \r\n    document.getElementById(\"app-container\").appendChild(overlay);\r\n    document.getElementById(\"app-container\").appendChild(timer);\r\n\r\n    var timerInterval\r\n    var remainingTime = 30;\r\n\r\n    function startGame(){\r\n        overlay.removeEventListener(\"click\", startGame);\r\n        jsPsych.init({\r\n            display_element: \"pyramidy-target\",\r\n            timeline : buildPyramidTimeline(category),\r\n            on_finish: function(data){\r\n                jsPsych.data.displayData(\"json\");\r\n                overlay.remove();\r\n                timer.remove();\r\n                return\r\n            }\r\n        })\r\n    }\r\n\r\n    overlay.addEventListener(\"click\", startGame)\r\n\r\n    function buildPyramidTimeline(category) {\r\n        var timeline = [\r\n            {\r\n                type: \"html-keyboard-response\",\r\n                stimulus: \"Vous aurez 30 secondes pour faire deviner un maximum de mots. Si vous devez deviner, dÃ©tournez le regard maintenant. Appuyez sur une touche pour commencer!\",\r\n                on_finish: function(data) {\r\n                    timer.textContent = remainingTime.toString();\r\n                    timerInterval = setInterval( () => {\r\n                        remainingTime--;\r\n                        timer.textContent = remainingTime.toString();\r\n                        if(remainingTime < 1){\r\n                            jsPsych.endExperiment();\r\n                            clearInterval(timerInterval);\r\n                        }\r\n                        \r\n                    }, 1000);\r\n                }\r\n            }\r\n        ]\r\n    \r\n        category.words.forEach((word, idx) => {\r\n            timeline.push({\r\n                type: \"html-button-response\",\r\n                stimulus: word,\r\n                choices: [\"correct\", \"passe\"]\r\n            })\r\n        })\r\n    \r\n    \r\n        return timeline\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default runWords;","import React, { Component } from 'react';\r\nimport PropType from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport runWords from '../quiz';\r\n\r\n\r\n\r\nclass Categorie extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.jsPsychTarget = React.createRef();\r\n        this.play = this.play.bind(this);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n\r\n    play(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.setState({\r\n            disabled:true\r\n        })\r\n\r\n        runWords(this.props.category, this.jsPsychTarget.current)\r\n    }\r\n\r\n    render(){\r\n\r\n        var catClass = classNames(\"pyramidy-categorie\",{\r\n            'pyramidy-categorie-disabled': this.state.disabled,\r\n            'pyramidy-categorie-playing': this.props.playing\r\n        })\r\n\r\n\r\n\r\n        return(\r\n            \r\n            <div id={\"pyramidy-categorie-\"+this.props.order} className={catClass} ref={this.jsPsychTarget} style={this.props.style} onClick={this.play}>\r\n                <span>{this.props.displayName}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nCategorie.defaultProps = {\r\n    disabled: false,\r\n    playing: false,\r\n    displayName: \"None\",\r\n    fullName: \"None\"\r\n}\r\n\r\nexport default Categorie","import React, { Component } from 'react';\r\nimport Categorie from './categorie';\r\nimport algebra from 'algebra.js';\r\n\r\nclass Pyramid extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.mainFrame = React.createRef();\r\n        this.state = {\r\n            categories: this.props.categories\r\n        }\r\n    }\r\n\r\n    findHeigth(num){\r\n        var formula = algebra.parse(\"1/2 * x^2 + 1/2 * x - \"+num + \" = 0\"); //By Gauss's equation n(n+1)/2\r\n        return Math.ceil(formula.solveFor(\"x\")[1].valueOf()); // take the ceiling integer part of the positive root\r\n       \r\n    }\r\n\r\n    getGridCss(){\r\n        var pyramidHeigth = this.findHeigth(this.state.categories.length);\r\n        var dims = {\r\n            rows: pyramidHeigth,\r\n            cols: pyramidHeigth * 2\r\n        }\r\n        var style =  {\r\n            gridTemplateColumns : ((100 / dims[\"cols\"]).toString()+\"% \").repeat(dims[\"cols\"]),\r\n            gridTemplateRows: ((100 / dims[\"rows\"]).toString()+\"% \").repeat(dims[\"rows\"]),\r\n        }\r\n        return style;\r\n    }\r\n\r\n    findCutoffs(heigth) {\r\n        var cutoffs = []\r\n        for(let i=0; i<heigth; i++){\r\n            if(cutoffs.length === 0){\r\n                cutoffs.push(1);\r\n            }\r\n            else{\r\n                cutoffs.push(cutoffs[cutoffs.length-1]+i);\r\n            }\r\n        }\r\n        return cutoffs\r\n    }\r\n\r\n    calculateElemsGridCss(categories) {\r\n        var pyramidHeigth = this.findHeigth(this.state.categories.length)\r\n        var cutoffs = this.findCutoffs(pyramidHeigth);\r\n        var styles = []\r\n\r\n        cutoffs.forEach((threshold, row) => {\r\n            var startingCol = pyramidHeigth - row;\r\n\r\n            for(let i=0; i<row+1; i++){\r\n                if((threshold+i) > categories.length){\r\n                    break;\r\n                }\r\n                styles.push({\r\n                    gridColumnStart: startingCol+ (i*2),\r\n                    gridColumnEnd: \"span 2\",\r\n                    gridRowStart:row+1\r\n                })\r\n            }\r\n        })\r\n\r\n        return styles;\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        var styles = this.calculateElemsGridCss(this.props.categories)\r\n\r\n        return (\r\n            <div className=\"pyramidy-main\" style={this.getGridCss()}>\r\n                {this.state.categories.map( (elem, idx) => (\r\n                    <Categorie style={styles[idx]} key={idx} order={idx} displayName={elem.displayName} fullName={elem.fullName} category={elem}/>\r\n                ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pyramid","import React, { Component } from 'react';\nimport './App.css';\nimport Pyramid from './pyramidy/pyramid';\nimport jsyaml from 'js-yaml';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n    this.input = React.createRef()\n    this.loadData = this.loadData.bind(this);\n    this.state = {\n      data: null\n    }\n  }\n\n  loadData(e){\n    e.preventDefault();\n    var file = this.input.current.files[0];\n    var reader = new FileReader();\n    var self = this;\n    \n    reader.onload = function(){\n      var text = reader.result\n      try {\n        var parsed = jsyaml.safeLoad(text);\n        self.setState({\n          data: parsed.categories\n        })\n      }\n      catch (e){\n        alert(\"Oups! there was a problem with your file, check syntax\")\n      }\n    }\n\n    reader.readAsText(file)\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\" id=\"app-container\">\n        <div id=\"pyramidy-selector\" style={{display: this.state.data === null ? \"block\" : \"none\"}}>\n          <label htmlFor=\"source\">Selectionner votre jeu</label><br/>\n          <input type=\"file\" id=\"source\" name=\"source\" accept=\".txt,.yaml,.yml\" ref={this.input} onChange={this.loadData}/>\n        </div>\n          { (() => {\n            if(this.state.data === null){\n              return\n            }\n            else{\n              return (<Pyramid categories={this.state.data} />)\n            }\n          })()}\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    (<main>\n        <header>\n            <h3>EZ-Pyramidy</h3>\n            <h4>Le systeme de jeu Pyramide FACILE a utiliser</h4>\n        </header>\n        <section>\n            <App />\n        </section>\n    </main>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}