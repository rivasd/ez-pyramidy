{"version":3,"sources":["quiz.js","pyramidy/pyramid.js","serviceWorker.js","index.js"],"names":["category","max_time","overlay","document","createElement","classList","add","innerHTML","fullName","id","timerInterval","timer","getElementById","appendChild","remainingTime","buildPyramidTimeline","intro","type","stimulus","addEventListener","startGame","removeEventListener","jsPsych","init","display_element","timeline","on_finish","data","clearInterval","textContent","score","select","values","reduce","acc","cur","toString","setTimeout","remove","valueOf","hostname","window","match","location","publicUrl","process"],"mappings":"yUAGA,SAAkBA,GAAuB,IAAbC,EAAY,uDAAH,GAC7BC,EAAUC,SAASC,cAAc,OACrCF,EAAQG,UAAUC,IAAI,WACtBJ,EAAQK,UAAY,oBAAsBP,EAASQ,SAAS,OAC5DN,EAAQO,GAAK,kBAEb,IAMIC,EANAC,EAAQR,SAASC,cAAc,QACnCO,EAAMN,UAAUC,IAAI,kBAEpBH,SAASS,eAAe,iBAAiBC,YAAYX,GACrDC,SAASS,eAAe,iBAAiBC,YAAYF,GAGrD,IAAIG,EAAgBb,EA4BpB,SAASc,EAAqBf,GAC1B,IAAIgB,EACA,CACIC,KAAM,yBACNC,SAAU,4Q,+hBA/BlB,aAAclB,IACdc,EAAgBd,EAASC,UAwB7BC,EAAQiB,iBAAiB,SApBzB,SAASC,IACLlB,EAAQmB,oBAAoB,QAASD,GACrCE,QAAQC,KAAK,CACTC,gBAAiB,kBACjBC,SAAWV,EAAqBf,GAChC0B,UAAW,SAACC,GACRC,cAAclB,GACdC,EAAMkB,YAAc,GACpB,IAAIC,EAAQH,EAAKI,OAAO,WAAWC,OAAOC,QAAQ,SAACC,EAAKC,GACpD,OAAOD,GAAOC,EAAK,EAAG,KACvB,GACHjC,EAAQK,UAAY,aAAcuB,EAAMM,WAAa,OACrDC,YAAW,WACPnC,EAAQoC,SACR3B,EAAM2B,WACP,Y,62BCnBM,SAAyBC,GAAY,2L,OAAC,OAAO,EAA0B,EAAjC,CAAoC,EAAQ,GAA7C,sGAEzD,O,wiCAFoB,C,2sCCHLC,QACD,cADfC,OAAiC,SAC7B,UACuBC,UAA3BD,OAAOE,SAASH,UAQhB,OAAMI,SAAc,SAAMC,iECN9B,EAAkB,EAAE,OAAO,EAAc,EAAE,cAAc,OAAO,KAAK,EAAc,EAAE,cAAc,SAAS,KAAK,EAAc,EAAE,cAAc,KAAK,KAAK,eAAe,EAAc,EAAE,cAAc,KAAK,KAAK,uDAAuD,EAAc,EAAE,cAAc,UAAU,KAAK,EAAc,EAAE,cAAc,EAAU,QAAQ,SAAS,eAAe,S","file":"static/js/main.ed8d5fb3.chunk.js","sourcesContent":["/* global jsPsych */\r\n\r\n\r\nfunction runWords(category, max_time=60){\r\n    var overlay = document.createElement(\"div\");\r\n    overlay.classList.add(\"overlay\");\r\n    overlay.innerHTML = \"<p class=\\\"title\\\">\"+category.fullName+\"</p>\"\r\n    overlay.id = \"pyramidy-target\"\r\n\r\n    var timer = document.createElement(\"span\");\r\n    timer.classList.add(\"pyramidy-timer\");\r\n    \r\n    document.getElementById(\"app-container\").appendChild(overlay);\r\n    document.getElementById(\"app-container\").appendChild(timer);\r\n\r\n    var timerInterval\r\n    var remainingTime = max_time;\r\n    if( \"max_time\" in category){\r\n        remainingTime = category.max_time;\r\n    }\r\n    \r\n\r\n    function startGame(){\r\n        overlay.removeEventListener(\"click\", startGame);\r\n        jsPsych.init({\r\n            display_element: \"pyramidy-target\",\r\n            timeline : buildPyramidTimeline(category),\r\n            on_finish: (data) => {\r\n                clearInterval(timerInterval);\r\n                timer.textContent = \"\";\r\n                var score = data.select(\"correct\").values.reduce( (acc, cur) =>{\r\n                    return acc + (cur? 1: 0);\r\n                }, 0);\r\n                overlay.innerHTML = \"<p>score: \"+ score.toString() + \"</p>\";\r\n                setTimeout(()=>{\r\n                    overlay.remove();\r\n                    timer.remove();\r\n                }, 2000)\r\n            }\r\n        }) \r\n    }\r\n\r\n    overlay.addEventListener(\"click\", startGame)\r\n\r\n    function buildPyramidTimeline(category) {\r\n        var intro = \r\n            {\r\n                type: \"html-keyboard-response\",\r\n                stimulus: \"<p>Vous aurez 30 secondes pour faire deviner un maximum de mots. Si vous devez deviner, d√©tournez le regard maintenant. </p> \\\r\n                        <p> Arbitre, appuyez sur 'S' si bonne reponse, 'A' pour passer </p> <p>Appuyez sur une touche pour commencer!</p>\",\r\n                on_finish: function(data) {\r\n                    timer.textContent = remainingTime.toString();\r\n                    timerInterval = setInterval( () => {\r\n                        remainingTime--;\r\n                        timer.textContent = remainingTime.toString();\r\n                        if(remainingTime < 1){\r\n                            jsPsych.endExperiment();\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n        \r\n\r\n        var answers = [...category.words];\r\n        var total_num = answers.length;\r\n        var counter = 0;\r\n\r\n        var questions = {\r\n            type: \"categorize-html\",\r\n            stimulus: () => {\r\n                return \"<p>\" + answers[counter % answers.length] + \"</p>\"\r\n            },\r\n            choices: [\"a\", \"s\"],\r\n            correct_text:\"Bravo!\",\r\n            incorrect_text: \"ipelaille...\",\r\n            feedback_duration: 250,\r\n            key_answer: jsPsych.pluginAPI.convertKeyCharacterToKeyCode(\"s\"),\r\n            on_finish: (data) => {\r\n                if (data.correct){\r\n                    answers.splice(counter % answers.length, 1);\r\n                }\r\n                else{\r\n                    counter++;\r\n                }\r\n                \r\n            }\r\n        }\r\n    \r\n    \r\n    \r\n        return [intro, {\r\n            timeline: [questions],\r\n            loop_function: () => {\r\n                return answers.length > 0\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default runWords;","import React, { Component } from 'react';\r\nimport Categorie from './categorie';\r\nimport algebra from 'algebra.js';\r\n\r\nclass Pyramid extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.mainFrame = React.createRef();\r\n\r\n        this.state = {\r\n            categories : props.categories,\r\n            default_time: props.default_time\r\n        }\r\n    }\r\n\r\n    findHeigth(num){\r\n        var formula = algebra.parse(\"1/2 * x^2 + 1/2 * x - \"+num + \" = 0\"); //By Gauss's equation n(n+1)/2\r\n        return Math.ceil(formula.solveFor(\"x\")[1].valueOf()); // take the ceiling integer part of the positive root\r\n       \r\n    }\r\n\r\n    getGridCss(){\r\n        var pyramidHeigth = this.findHeigth(this.state.categories.length);\r\n        var dims = {\r\n            rows: pyramidHeigth,\r\n            cols: pyramidHeigth * 2\r\n        }\r\n        var style =  {\r\n            gridTemplateColumns : ((100 / dims[\"cols\"]).toString()+\"% \").repeat(dims[\"cols\"]),\r\n            gridTemplateRows: ((100 / dims[\"rows\"]).toString()+\"% \").repeat(dims[\"rows\"]),\r\n        }\r\n        return style;\r\n    }\r\n\r\n    findCutoffs(heigth) {\r\n        var cutoffs = []\r\n        for(let i=0; i<heigth; i++){\r\n            if(cutoffs.length === 0){\r\n                cutoffs.push(1);\r\n            }\r\n            else{\r\n                cutoffs.push(cutoffs[cutoffs.length-1]+i);\r\n            }\r\n        }\r\n        return cutoffs\r\n    }\r\n\r\n    calculateElemsGridCss(categories) {\r\n        var pyramidHeigth = this.findHeigth(this.state.categories.length)\r\n        var cutoffs = this.findCutoffs(pyramidHeigth);\r\n        var styles = []\r\n\r\n        cutoffs.forEach((threshold, row) => {\r\n            var startingCol = pyramidHeigth - row;\r\n\r\n            for(let i=0; i<row+1; i++){\r\n                if((threshold+i) > categories.length){\r\n                    break;\r\n                }\r\n                styles.push({\r\n                    gridColumnStart: startingCol+ (i*2),\r\n                    gridColumnEnd: \"span 2\",\r\n                    gridRowStart:row+1\r\n                })\r\n            }\r\n        })\r\n\r\n        return styles;\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        var styles = this.calculateElemsGridCss(this.props.categories)\r\n\r\n        return (\r\n            <div className=\"pyramidy-main\" style={this.getGridCss()}>\r\n                {this.state.categories.map( (elem, idx) => (\r\n                    <Categorie style={styles[idx]} key={idx} order={idx} displayName={elem.displayName} fullName={elem.fullName} category={elem} default_time={this.props.default_time}/>\r\n                ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pyramid","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    (<main>\n        <header>\n            <h3>EZ-Pyramidy</h3>\n            <h4>Le syst√®me de jeu Pyramide FACILE √† utiliser</h4>\n        </header>\n        <section>\n            <App />\n        </section>\n    </main>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}